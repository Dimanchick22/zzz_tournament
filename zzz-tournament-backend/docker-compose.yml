version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: zzz_tournament_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: zzz_tournament
      POSTGRES_USER: tournament_user
      POSTGRES_PASSWORD: tournament_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - zzz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tournament_user -d zzz_tournament"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis для кэширования и rate limiting
  redis:
    image: redis:7-alpine
    container_name: zzz_tournament_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - zzz_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: zzz_tournament_backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - DATABASE_URL=postgres://tournament_user:tournament_password@postgres:5432/zzz_tournament?sslmode=disable
      - REDIS_URL=redis://:redis_password@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - LOG_LEVEL=info
      - RATE_LIMIT_REDIS=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zzz_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (опционально)
  frontend:
    image: nginx:alpine
    container_name: zzz_tournament_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - zzz_network
    profiles:
      - frontend

  # Nginx reverse proxy (для продакшена)
  nginx:
    image: nginx:alpine
    container_name: zzz_tournament_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - zzz_network
    profiles:
      - production

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: zzz_tournament_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - zzz_network
    profiles:
      - monitoring

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: zzz_tournament_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - zzz_network
    profiles:
      - monitoring

# Сети
networks:
  zzz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Тома для данных
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local