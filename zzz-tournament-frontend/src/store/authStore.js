// Auth Store - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export const useAuthStore = create(
  persist(
    (set, get) => ({
      // State
      isAuthenticated: false,
      isLoading: false,
      user: null,
      token: null,
      error: null,

      // Actions
      setLoading: (loading) => set({ isLoading: loading }),
      
      setError: (error) => set({ error }),
      
      clearError: () => set({ error: null }),

      // Login action
      login: (userData, token) => {
        console.log('üîë Logging in user:', userData?.username, 'with token:', !!token)
        
        set({
          isAuthenticated: true,
          user: userData,
          token: token,
          error: null,
          isLoading: false
        })
      },

      // Logout action
      logout: () => {
        console.log('üö™ Logging out user')
        
        set({
          isAuthenticated: false,
          user: null,
          token: null,
          error: null,
          isLoading: false
        })
        
        // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º localStorage —è–≤–Ω–æ
        localStorage.removeItem('auth-storage')
      },

      // Update user profile
      updateUser: (userData) => {
        const currentUser = get().user
        if (!currentUser) {
          console.warn('Trying to update user but no user is logged in')
          return
        }
        
        const updatedUser = { ...currentUser, ...userData }
        console.log('üë§ Updating user data:', updatedUser.username)
        
        set(state => ({
          user: updatedUser
        }))
      },

      // Initialize auth (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
      initAuth: () => {
        const state = get()
        console.log('üöÄ Initializing auth. Token exists:', !!state.token, 'User exists:', !!state.user)
        
        if (state.token && state.user) {
          set({ 
            isAuthenticated: true, 
            isLoading: false 
          })
        } else {
          set({ 
            isAuthenticated: false, 
            isLoading: false,
            user: null,
            token: null 
          })
        }
      },

      // Reset store (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      reset: () => {
        set({
          isAuthenticated: false,
          isLoading: false,
          user: null,
          token: null,
          error: null
        })
        localStorage.removeItem('auth-storage')
      }
    }),
    {
      name: 'auth-storage', // localStorage key
      partialize: (state) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤ localStorage
        return {
          user: state.user,
          token: state.token,
          isAuthenticated: state.isAuthenticated
        }
      },
      onRehydrateStorage: () => (state, error) => {
        if (error) {
          console.error('Failed to rehydrate auth store:', error)
          return
        }
        
        if (state) {
          console.log('üíæ Auth store rehydrated:', {
            hasUser: !!state.user,
            hasToken: !!state.token,
            username: state.user?.username
          })
          
          // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          if (state.user && state.token) {
            state.isAuthenticated = true
          } else {
            state.isAuthenticated = false
            state.user = null
            state.token = null
          }
        }
      }
    }
  )
)