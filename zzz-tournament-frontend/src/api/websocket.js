// WebSocket Client
import { getWsUrl } from '@config/env'
import { WS_CONFIG } from '@config/api'

class WebSocketClient {
  constructor() {
    this.ws = null
    this.isConnected = false
    this.isConnecting = false
    this.reconnectAttempts = 0
    this.listeners = new Map()
    this.heartbeatInterval = null
    this.reconnectTimeout = null
    this.messageQueue = []
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   * @param {string} [token] - JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @returns {Promise<boolean>} —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connect(token = null) {
    if (this.isConnected || this.isConnecting) {
      return true
    }

    return new Promise((resolve, reject) => {
      try {
        this.isConnecting = true
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if (!token) {
          const authData = localStorage.getItem('auth-storage')
          if (authData) {
            try {
              const parsedAuth = JSON.parse(authData)
              token = parsedAuth.state?.token
            } catch (error) {
              console.warn('Failed to parse auth token for WebSocket:', error)
            }
          }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º
        const wsUrl = token 
          ? `${getWsUrl('/ws')}?token=${token}`
          : getWsUrl('/ws')

        this.ws = new WebSocket(wsUrl)

        // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connectionTimeout = setTimeout(() => {
          if (this.ws.readyState !== WebSocket.OPEN) {
            this.ws.close()
            this.isConnecting = false
            reject(new Error('WebSocket connection timeout'))
          }
        }, WS_CONFIG.CONNECTION_TIMEOUT)

        this.ws.onopen = () => {
          clearTimeout(connectionTimeout)
          this.isConnected = true
          this.isConnecting = false
          this.reconnectAttempts = 0
          
          console.log('‚úÖ WebSocket connected')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
          this.startHeartbeat()
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          this.flushMessageQueue()
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          this.emit('connected')
          
          resolve(true)
        }

        this.ws.onclose = (event) => {
          clearTimeout(connectionTimeout)
          this.isConnected = false
          this.isConnecting = false
          this.stopHeartbeat()
          
          console.log('‚ùå WebSocket disconnected:', event.code, event.reason)
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
          this.emit('disconnected', { code: event.code, reason: event.reason })
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
          if (event.code !== 1000 && this.reconnectAttempts < WS_CONFIG.MAX_RECONNECT_ATTEMPTS) {
            this.scheduleReconnect(token)
          }
          
          if (this.isConnecting) {
            reject(new Error(`WebSocket connection failed: ${event.code} ${event.reason}`))
          }
        }

        this.ws.onerror = (error) => {
          console.error('‚ùå WebSocket error:', error)
          this.emit('error', error)
          
          if (this.isConnecting) {
            clearTimeout(connectionTimeout)
            this.isConnecting = false
            reject(error)
          }
        }

        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data)
            this.handleMessage(message)
          } catch (error) {
            console.error('Failed to parse WebSocket message:', error, event.data)
          }
        }

      } catch (error) {
        this.isConnecting = false
        reject(error)
      }
    })
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect() {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout)
      this.reconnectTimeout = null
    }

    this.stopHeartbeat()

    if (this.ws) {
      this.ws.close(1000, 'Client disconnect')
      this.ws = null
    }

    this.isConnected = false
    this.isConnecting = false
    this.reconnectAttempts = 0
    this.messageQueue = []
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} type - —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} data - –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  send(type, data = {}) {
    const message = {
      type,
      data,
      timestamp: Date.now()
    }

    if (this.isConnected && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message))
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      this.messageQueue.push(message)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      if (!this.isConnecting && !this.isConnected) {
        this.connect()
      }
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
   * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Function} callback - –∫–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è
   */
  on(event, callback) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, [])
    }
    this.listeners.get(event).push(callback)
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
   * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Function} [callback] - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–ª–ª–±–µ–∫ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ)
   */
  off(event, callback = null) {
    if (!this.listeners.has(event)) return

    if (callback) {
      const callbacks = this.listeners.get(event)
      const index = callbacks.indexOf(callback)
      if (index > -1) {
        callbacks.splice(index, 1)
      }
    } else {
      this.listeners.set(event, [])
    }
  }

  /**
   * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   * @param {string} event - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {*} data - –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  emit(event, data = null) {
    if (this.listeners.has(event)) {
      this.listeners.get(event).forEach(callback => {
        try {
          callback(data)
        } catch (error) {
          console.error(`Error in WebSocket event handler for ${event}:`, error)
        }
      })
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Object} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  handleMessage(message) {
    const { type, data } = message

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (type === WS_CONFIG.MESSAGE_TYPES.HEARTBEAT) {
      return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º heartbeat –æ—Ç–≤–µ—Ç—ã
    }

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.emit(type, data)
    
    // –≠–º–∏—Ç–∏–º –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ 'message'
    this.emit('message', message)
  }

  /**
   * –ó–∞–ø—É—Å–∫ heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  startHeartbeat() {
    this.stopHeartbeat()
    
    this.heartbeatInterval = setInterval(() => {
      if (this.isConnected) {
        this.send(WS_CONFIG.MESSAGE_TYPES.HEARTBEAT)
      }
    }, WS_CONFIG.HEARTBEAT_INTERVAL)
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
   */
  stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval)
      this.heartbeatInterval = null
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω
   */
  scheduleReconnect(token) {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout)
    }

    this.reconnectAttempts++
    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 30000) // Exponential backoff, max 30s

    console.log(`üîÑ Scheduling WebSocket reconnect in ${delay}ms (attempt ${this.reconnectAttempts}/${WS_CONFIG.MAX_RECONNECT_ATTEMPTS})`)

    this.reconnectTimeout = setTimeout(() => {
      this.connect(token).catch(error => {
        console.error('WebSocket reconnect failed:', error)
      })
    }, delay)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  flushMessageQueue() {
    while (this.messageQueue.length > 0 && this.isConnected) {
      const message = this.messageQueue.shift()
      this.ws.send(JSON.stringify(message))
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getConnectionState() {
    return {
      isConnected: this.isConnected,
      isConnecting: this.isConnecting,
      reconnectAttempts: this.reconnectAttempts,
      queuedMessages: this.messageQueue.length
    }
  }

  // === –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
   * @param {number} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
   */
  joinRoom(roomId) {
    this.send(WS_CONFIG.MESSAGE_TYPES.JOIN_ROOM, { room_id: roomId })
  }

  /**
   * –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
   * @param {number} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
   */
  leaveRoom(roomId) {
    this.send(WS_CONFIG.MESSAGE_TYPES.LEAVE_ROOM, { room_id: roomId })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
   * @param {number} roomId - ID –∫–æ–º–Ω–∞—Ç—ã
   * @param {string} content - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  sendChatMessage(roomId, content) {
    this.send(WS_CONFIG.MESSAGE_TYPES.CHAT_MESSAGE, {
      room_id: roomId,
      content: content
    })
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞
const wsClient = new WebSocketClient()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export { wsClient, WS_CONFIG }
export default wsClient